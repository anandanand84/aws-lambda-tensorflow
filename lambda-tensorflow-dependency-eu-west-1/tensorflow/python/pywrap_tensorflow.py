# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywrap_tensorflow', [dirname(__file__)])
        except ImportError:
            import _pywrap_tensorflow
            return _pywrap_tensorflow
        if fp is not None:
            try:
                _mod = imp.load_module('_pywrap_tensorflow', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywrap_tensorflow = swig_import_helper()
    del swig_import_helper
else:
    import _pywrap_tensorflow
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def IsGoogleCudaEnabled():
  return _pywrap_tensorflow.IsGoogleCudaEnabled()
IsGoogleCudaEnabled = _pywrap_tensorflow.IsGoogleCudaEnabled

def CudaSupportsHalfMatMulAndConv():
  return _pywrap_tensorflow.CudaSupportsHalfMatMulAndConv()
CudaSupportsHalfMatMulAndConv = _pywrap_tensorflow.CudaSupportsHalfMatMulAndConv

def CheckpointReader_GetTensor(*args):
  return _pywrap_tensorflow.CheckpointReader_GetTensor(*args)
CheckpointReader_GetTensor = _pywrap_tensorflow.CheckpointReader_GetTensor
def NewCheckpointReader(filepattern):
  from tensorflow.python.framework import errors
  with errors.raise_exception_on_not_ok_status() as status:
    from tensorflow.python.util import compat
    return CheckpointReader(compat.as_bytes(filepattern), status)

class CheckpointReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckpointReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CheckpointReader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrap_tensorflow.delete_CheckpointReader
    __del__ = lambda self : None;
    def _HasTensor(self, *args): return _pywrap_tensorflow.CheckpointReader__HasTensor(self, *args)
    def debug_string(self): return _pywrap_tensorflow.CheckpointReader_debug_string(self)
    def get_variable_to_shape_map(self): return _pywrap_tensorflow.CheckpointReader_get_variable_to_shape_map(self)
    def __init__(self, *args): 
        this = _pywrap_tensorflow.new_CheckpointReader(*args)
        try: self.this.append(this)
        except: self.this = this
    def has_tensor(self, tensor_str):
      from tensorflow.python.util import compat
      return self._HasTensor(compat.as_bytes(tensor_str))

    def get_tensor(self, tensor_str):
      from tensorflow.python.framework import errors
      with errors.raise_exception_on_not_ok_status() as status:
        from tensorflow.python.util import compat
        return CheckpointReader_GetTensor(self, compat.as_bytes(tensor_str),
                                          status)

CheckpointReader_swigregister = _pywrap_tensorflow.CheckpointReader_swigregister
CheckpointReader_swigregister(CheckpointReader)


def InitializePyTrampoline(*args):
  return _pywrap_tensorflow.InitializePyTrampoline(*args)
InitializePyTrampoline = _pywrap_tensorflow.InitializePyTrampoline
class PyRecordReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyRecordReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyRecordReader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _pywrap_tensorflow.PyRecordReader_New
    if _newclass:New = staticmethod(_pywrap_tensorflow.PyRecordReader_New)
    __swig_destroy__ = _pywrap_tensorflow.delete_PyRecordReader
    __del__ = lambda self : None;
    def GetNext(self): return _pywrap_tensorflow.PyRecordReader_GetNext(self)
    def record(self): return _pywrap_tensorflow.PyRecordReader_record(self)
    def offset(self): return _pywrap_tensorflow.PyRecordReader_offset(self)
    def Close(self): return _pywrap_tensorflow.PyRecordReader_Close(self)
PyRecordReader_swigregister = _pywrap_tensorflow.PyRecordReader_swigregister
PyRecordReader_swigregister(PyRecordReader)

def PyRecordReader_New(*args):
  return _pywrap_tensorflow.PyRecordReader_New(*args)
PyRecordReader_New = _pywrap_tensorflow.PyRecordReader_New

class PyRecordWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyRecordWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyRecordWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _pywrap_tensorflow.PyRecordWriter_New
    if _newclass:New = staticmethod(_pywrap_tensorflow.PyRecordWriter_New)
    __swig_destroy__ = _pywrap_tensorflow.delete_PyRecordWriter
    __del__ = lambda self : None;
    def WriteRecord(self, *args): return _pywrap_tensorflow.PyRecordWriter_WriteRecord(self, *args)
    def Close(self): return _pywrap_tensorflow.PyRecordWriter_Close(self)
PyRecordWriter_swigregister = _pywrap_tensorflow.PyRecordWriter_swigregister
PyRecordWriter_swigregister(PyRecordWriter)

def PyRecordWriter_New(*args):
  return _pywrap_tensorflow.PyRecordWriter_New(*args)
PyRecordWriter_New = _pywrap_tensorflow.PyRecordWriter_New

class EventsWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventsWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventsWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywrap_tensorflow.new_EventsWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywrap_tensorflow.delete_EventsWriter
    __del__ = lambda self : None;
    def FileName(self): return _pywrap_tensorflow.EventsWriter_FileName(self)
    def _WriteSerializedEvent(self, *args): return _pywrap_tensorflow.EventsWriter__WriteSerializedEvent(self, *args)
    def Flush(self): return _pywrap_tensorflow.EventsWriter_Flush(self)
    def Close(self): return _pywrap_tensorflow.EventsWriter_Close(self)
    def WriteEvent(self, event):
      from tensorflow.core.util.event_pb2 import Event
      if not isinstance(event, Event):
        raise TypeError("Expected an event_pb2.Event proto, "
                        " but got %s" % type(event))
      return self._WriteSerializedEvent(event.SerializeToString())

EventsWriter_swigregister = _pywrap_tensorflow.EventsWriter_swigregister
EventsWriter_swigregister(EventsWriter)

__version__ = _pywrap_tensorflow.__version__
GRAPH_DEF_VERSION = _pywrap_tensorflow.GRAPH_DEF_VERSION
GRAPH_DEF_VERSION_MIN_CONSUMER = _pywrap_tensorflow.GRAPH_DEF_VERSION_MIN_CONSUMER
GRAPH_DEF_VERSION_MIN_PRODUCER = _pywrap_tensorflow.GRAPH_DEF_VERSION_MIN_PRODUCER
class TF_Buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TF_Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TF_Buffer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pywrap_tensorflow.new_TF_Buffer()
        try: self.this.append(this)
        except: self.this = this
TF_Buffer_swigregister = _pywrap_tensorflow.TF_Buffer_swigregister
TF_Buffer_swigregister(TF_Buffer)


def TF_NewBufferFromString(*args):
  return _pywrap_tensorflow.TF_NewBufferFromString(*args)
TF_NewBufferFromString = _pywrap_tensorflow.TF_NewBufferFromString

def TF_NewBuffer():
  return _pywrap_tensorflow.TF_NewBuffer()
TF_NewBuffer = _pywrap_tensorflow.TF_NewBuffer

def TF_DeleteBuffer(*args):
  return _pywrap_tensorflow.TF_DeleteBuffer(*args)
TF_DeleteBuffer = _pywrap_tensorflow.TF_DeleteBuffer

def TF_GetBuffer(*args):
  return _pywrap_tensorflow.TF_GetBuffer(*args)
TF_GetBuffer = _pywrap_tensorflow.TF_GetBuffer

def TF_NewStatus():
  return _pywrap_tensorflow.TF_NewStatus()
TF_NewStatus = _pywrap_tensorflow.TF_NewStatus

def TF_DeleteStatus(*args):
  return _pywrap_tensorflow.TF_DeleteStatus(*args)
TF_DeleteStatus = _pywrap_tensorflow.TF_DeleteStatus

def TF_GetCode(*args):
  return _pywrap_tensorflow.TF_GetCode(*args)
TF_GetCode = _pywrap_tensorflow.TF_GetCode

def TF_Message(*args):
  return _pywrap_tensorflow.TF_Message(*args)
TF_Message = _pywrap_tensorflow.TF_Message

def _TF_NewSessionOptions():
  return _pywrap_tensorflow._TF_NewSessionOptions()
_TF_NewSessionOptions = _pywrap_tensorflow._TF_NewSessionOptions

def _TF_SetTarget(*args):
  return _pywrap_tensorflow._TF_SetTarget(*args)
_TF_SetTarget = _pywrap_tensorflow._TF_SetTarget

def _TF_SetConfig(*args):
  return _pywrap_tensorflow._TF_SetConfig(*args)
_TF_SetConfig = _pywrap_tensorflow._TF_SetConfig

def TF_DeleteSessionOptions(*args):
  return _pywrap_tensorflow.TF_DeleteSessionOptions(*args)
TF_DeleteSessionOptions = _pywrap_tensorflow.TF_DeleteSessionOptions

def TF_NewSession(*args):
  return _pywrap_tensorflow.TF_NewSession(*args)
TF_NewSession = _pywrap_tensorflow.TF_NewSession

def TF_CloseSession(*args):
  return _pywrap_tensorflow.TF_CloseSession(*args)
TF_CloseSession = _pywrap_tensorflow.TF_CloseSession

def TF_DeleteSession(*args):
  return _pywrap_tensorflow.TF_DeleteSession(*args)
TF_DeleteSession = _pywrap_tensorflow.TF_DeleteSession

def TF_ExtendGraph(*args):
  return _pywrap_tensorflow.TF_ExtendGraph(*args)
TF_ExtendGraph = _pywrap_tensorflow.TF_ExtendGraph

def TF_LoadLibrary(*args):
  return _pywrap_tensorflow.TF_LoadLibrary(*args)
TF_LoadLibrary = _pywrap_tensorflow.TF_LoadLibrary

def TF_GetOpList(*args):
  return _pywrap_tensorflow.TF_GetOpList(*args)
TF_GetOpList = _pywrap_tensorflow.TF_GetOpList
def TF_NewSessionOptions(target=None, config=None):
  opts = _TF_NewSessionOptions()
  if target is not None:
    from tensorflow.python.util import compat
    _TF_SetTarget(opts, compat.as_bytes(target))
  if config is not None:
    from tensorflow.core.protobuf import config_pb2
    if not isinstance(config, config_pb2.ConfigProto):
      raise TypeError("Expected config_pb2.ConfigProto, "
                      "but got %s" % type(config))
    from tensorflow.python.framework import errors
    with errors.raise_exception_on_not_ok_status() as status:
      config_str = config.SerializeToString()
      _TF_SetConfig(opts, config_str, status)
  return opts


def TF_Run(*args):
  return _pywrap_tensorflow.TF_Run(*args)
TF_Run = _pywrap_tensorflow.TF_Run

def TF_PRunSetup(*args):
  return _pywrap_tensorflow.TF_PRunSetup(*args)
TF_PRunSetup = _pywrap_tensorflow.TF_PRunSetup

def TF_PRun(*args):
  return _pywrap_tensorflow.TF_PRun(*args)
TF_PRun = _pywrap_tensorflow.TF_PRun

def EqualGraphDefWrapper(*args):
  return _pywrap_tensorflow.EqualGraphDefWrapper(*args)
EqualGraphDefWrapper = _pywrap_tensorflow.EqualGraphDefWrapper
class DeviceFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["AddDevices"] = lambda x: _pywrap_tensorflow.DeviceFactory_AddDevices
    if _newclass:AddDevices = staticmethod(_pywrap_tensorflow.DeviceFactory_AddDevices)
DeviceFactory_swigregister = _pywrap_tensorflow.DeviceFactory_swigregister
DeviceFactory_swigregister(DeviceFactory)

def DeviceFactory_AddDevices():
  return _pywrap_tensorflow.DeviceFactory_AddDevices()
DeviceFactory_AddDevices = _pywrap_tensorflow.DeviceFactory_AddDevices


def FileExists(*args):
  return _pywrap_tensorflow.FileExists(*args)
FileExists = _pywrap_tensorflow.FileExists

def DeleteFile(*args):
  return _pywrap_tensorflow.DeleteFile(*args)
DeleteFile = _pywrap_tensorflow.DeleteFile

def ReadFileToString(*args):
  return _pywrap_tensorflow.ReadFileToString(*args)
ReadFileToString = _pywrap_tensorflow.ReadFileToString

def WriteStringToFile(*args):
  return _pywrap_tensorflow.WriteStringToFile(*args)
WriteStringToFile = _pywrap_tensorflow.WriteStringToFile

def GetMatchingFiles(*args):
  return _pywrap_tensorflow.GetMatchingFiles(*args)
GetMatchingFiles = _pywrap_tensorflow.GetMatchingFiles

def CreateDir(*args):
  return _pywrap_tensorflow.CreateDir(*args)
CreateDir = _pywrap_tensorflow.CreateDir
def file_exists(filename):
  from tensorflow.python.util import compat
  return FileExists(compat.as_bytes(filename))

def delete_file(filename):
  from tensorflow.python.framework import errors
  with errors.raise_exception_on_not_ok_status() as status:
    from tensorflow.python.util import compat
    DeleteFile(compat.as_bytes(filename), status)

def read_file_to_string(filename):
  from tensorflow.python.framework import errors
  with errors.raise_exception_on_not_ok_status() as status:
    from tensorflow.python.util import compat
    return ReadFileToString(compat.as_bytes(filename), status);

def write_string_to_file(filename, file_content):
  from tensorflow.python.framework import errors
  with errors.raise_exception_on_not_ok_status() as status:
    from tensorflow.python.util import compat
    WriteStringToFile(compat.as_bytes(filename),
        compat.as_bytes(file_content), status)

def get_matching_files(filename):
  from tensorflow.python.framework import errors
  with errors.raise_exception_on_not_ok_status() as status:
    from tensorflow.python.util import compat
    return GetMatchingFiles(compat.as_bytes(filename), status)

def create_dir(dirname):
  from tensorflow.python.framework import errors
  with errors.raise_exception_on_not_ok_status() as status:
    from tensorflow.python.util import compat
    CreateDir(compat.as_bytes(partial_dir), status)

def recursive_create_dir(dirname):
  from tensorflow.python.framework import errors
  with errors.raise_exception_on_not_ok_status() as status:
    from tensorflow.python.util import compat
    dirs = dirname.split('/')
    for i in range(len(dirs)):
      partial_dir = '/'.join(dirs[0:i+1])
      if partial_dir and not file_exists(partial_dir):
        CreateDir(compat.as_bytes(partial_dir), status)


def PyServer_New(*args):
  return _pywrap_tensorflow.PyServer_New(*args)
PyServer_New = _pywrap_tensorflow.PyServer_New

def PyServer_Start(*args):
  return _pywrap_tensorflow.PyServer_Start(*args)
PyServer_Start = _pywrap_tensorflow.PyServer_Start

def PyServer_Stop(*args):
  return _pywrap_tensorflow.PyServer_Stop(*args)
PyServer_Stop = _pywrap_tensorflow.PyServer_Stop

def PyServer_Join(*args):
  return _pywrap_tensorflow.PyServer_Join(*args)
PyServer_Join = _pywrap_tensorflow.PyServer_Join
class ServerInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ServerInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrap_tensorflow.delete_ServerInterface
    __del__ = lambda self : None;
    def target(self): return _pywrap_tensorflow.ServerInterface_target(self)
ServerInterface_swigregister = _pywrap_tensorflow.ServerInterface_swigregister
ServerInterface_swigregister(ServerInterface)


def GetPythonWrappers(*args):
  return _pywrap_tensorflow.GetPythonWrappers(*args)
GetPythonWrappers = _pywrap_tensorflow.GetPythonWrappers
# This file is compatible with both classic and new-style classes.



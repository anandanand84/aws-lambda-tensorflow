// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/device_attributes.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();

class DeviceAttributes;

enum BusAdjacency {
  BUS_0 = 0,
  BUS_1 = 1,
  BUS_ANY = 2,
  BUS_NUM_ADJACENCIES = 3,
  BusAdjacency_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BusAdjacency_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BusAdjacency_IsValid(int value);
const BusAdjacency BusAdjacency_MIN = BUS_0;
const BusAdjacency BusAdjacency_MAX = BUS_NUM_ADJACENCIES;
const int BusAdjacency_ARRAYSIZE = BusAdjacency_MAX + 1;

const ::google::protobuf::EnumDescriptor* BusAdjacency_descriptor();
inline const ::std::string& BusAdjacency_Name(BusAdjacency value) {
  return ::google::protobuf::internal::NameOfEnum(
    BusAdjacency_descriptor(), value);
}
inline bool BusAdjacency_Parse(
    const ::std::string& name, BusAdjacency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BusAdjacency>(
    BusAdjacency_descriptor(), name, value);
}
// ===================================================================

class DeviceAttributes : public ::google::protobuf::Message {
 public:
  DeviceAttributes();
  virtual ~DeviceAttributes();

  DeviceAttributes(const DeviceAttributes& from);

  inline DeviceAttributes& operator=(const DeviceAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceAttributes& default_instance();

  void Swap(DeviceAttributes* other);

  // implements Message ----------------------------------------------

  inline DeviceAttributes* New() const { return New(NULL); }

  DeviceAttributes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceAttributes& from);
  void MergeFrom(const DeviceAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string device_type = 2;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 2;
  const ::std::string& device_type() const;
  void set_device_type(const ::std::string& value);
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  ::std::string* mutable_device_type();
  ::std::string* release_device_type();
  void set_allocated_device_type(::std::string* device_type);

  // optional int64 memory_limit = 4;
  void clear_memory_limit();
  static const int kMemoryLimitFieldNumber = 4;
  ::google::protobuf::int64 memory_limit() const;
  void set_memory_limit(::google::protobuf::int64 value);

  // optional .tensorflow.BusAdjacency bus_adjacency = 5;
  void clear_bus_adjacency();
  static const int kBusAdjacencyFieldNumber = 5;
  ::tensorflow::BusAdjacency bus_adjacency() const;
  void set_bus_adjacency(::tensorflow::BusAdjacency value);

  // optional fixed64 incarnation = 6;
  void clear_incarnation();
  static const int kIncarnationFieldNumber = 6;
  ::google::protobuf::uint64 incarnation() const;
  void set_incarnation(::google::protobuf::uint64 value);

  // optional string physical_device_desc = 7;
  void clear_physical_device_desc();
  static const int kPhysicalDeviceDescFieldNumber = 7;
  const ::std::string& physical_device_desc() const;
  void set_physical_device_desc(const ::std::string& value);
  void set_physical_device_desc(const char* value);
  void set_physical_device_desc(const char* value, size_t size);
  ::std::string* mutable_physical_device_desc();
  ::std::string* release_physical_device_desc();
  void set_allocated_physical_device_desc(::std::string* physical_device_desc);

  // @@protoc_insertion_point(class_scope:tensorflow.DeviceAttributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr device_type_;
  ::google::protobuf::int64 memory_limit_;
  ::google::protobuf::uint64 incarnation_;
  ::google::protobuf::internal::ArenaStringPtr physical_device_desc_;
  int bus_adjacency_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();

  void InitAsDefaultInstance();
  static DeviceAttributes* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributes

// optional string name = 1;
inline void DeviceAttributes::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAttributes::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAttributes::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.name)
}
inline void DeviceAttributes::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceAttributes.name)
}
inline void DeviceAttributes::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceAttributes.name)
}
inline ::std::string* DeviceAttributes::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAttributes::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAttributes::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.name)
}

// optional string device_type = 2;
inline void DeviceAttributes::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAttributes::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.device_type)
  return device_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAttributes::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.device_type)
}
inline void DeviceAttributes::set_device_type(const char* value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceAttributes.device_type)
}
inline void DeviceAttributes::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceAttributes.device_type)
}
inline ::std::string* DeviceAttributes::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAttributes::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAttributes::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.device_type)
}

// optional int64 memory_limit = 4;
inline void DeviceAttributes::clear_memory_limit() {
  memory_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceAttributes::memory_limit() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.memory_limit)
  return memory_limit_;
}
inline void DeviceAttributes::set_memory_limit(::google::protobuf::int64 value) {
  
  memory_limit_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.memory_limit)
}

// optional .tensorflow.BusAdjacency bus_adjacency = 5;
inline void DeviceAttributes::clear_bus_adjacency() {
  bus_adjacency_ = 0;
}
inline ::tensorflow::BusAdjacency DeviceAttributes::bus_adjacency() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.bus_adjacency)
  return static_cast< ::tensorflow::BusAdjacency >(bus_adjacency_);
}
inline void DeviceAttributes::set_bus_adjacency(::tensorflow::BusAdjacency value) {
  
  bus_adjacency_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.bus_adjacency)
}

// optional fixed64 incarnation = 6;
inline void DeviceAttributes::clear_incarnation() {
  incarnation_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceAttributes::incarnation() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.incarnation)
  return incarnation_;
}
inline void DeviceAttributes::set_incarnation(::google::protobuf::uint64 value) {
  
  incarnation_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.incarnation)
}

// optional string physical_device_desc = 7;
inline void DeviceAttributes::clear_physical_device_desc() {
  physical_device_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAttributes::physical_device_desc() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.physical_device_desc)
  return physical_device_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAttributes::set_physical_device_desc(const ::std::string& value) {
  
  physical_device_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.physical_device_desc)
}
inline void DeviceAttributes::set_physical_device_desc(const char* value) {
  
  physical_device_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceAttributes.physical_device_desc)
}
inline void DeviceAttributes::set_physical_device_desc(const char* value, size_t size) {
  
  physical_device_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceAttributes.physical_device_desc)
}
inline ::std::string* DeviceAttributes::mutable_physical_device_desc() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.physical_device_desc)
  return physical_device_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAttributes::release_physical_device_desc() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.physical_device_desc)
  
  return physical_device_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAttributes::set_allocated_physical_device_desc(::std::string* physical_device_desc) {
  if (physical_device_desc != NULL) {
    
  } else {
    
  }
  physical_device_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_device_desc);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.physical_device_desc)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::BusAdjacency> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::BusAdjacency>() {
  return ::tensorflow::BusAdjacency_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/saver.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto();

class SaverDef;

// ===================================================================

class SaverDef : public ::google::protobuf::Message {
 public:
  SaverDef();
  virtual ~SaverDef();

  SaverDef(const SaverDef& from);

  inline SaverDef& operator=(const SaverDef& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaverDef& default_instance();

  void Swap(SaverDef* other);

  // implements Message ----------------------------------------------

  inline SaverDef* New() const { return New(NULL); }

  SaverDef* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaverDef& from);
  void MergeFrom(const SaverDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaverDef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename_tensor_name = 1;
  void clear_filename_tensor_name();
  static const int kFilenameTensorNameFieldNumber = 1;
  const ::std::string& filename_tensor_name() const;
  void set_filename_tensor_name(const ::std::string& value);
  void set_filename_tensor_name(const char* value);
  void set_filename_tensor_name(const char* value, size_t size);
  ::std::string* mutable_filename_tensor_name();
  ::std::string* release_filename_tensor_name();
  void set_allocated_filename_tensor_name(::std::string* filename_tensor_name);

  // optional string save_tensor_name = 2;
  void clear_save_tensor_name();
  static const int kSaveTensorNameFieldNumber = 2;
  const ::std::string& save_tensor_name() const;
  void set_save_tensor_name(const ::std::string& value);
  void set_save_tensor_name(const char* value);
  void set_save_tensor_name(const char* value, size_t size);
  ::std::string* mutable_save_tensor_name();
  ::std::string* release_save_tensor_name();
  void set_allocated_save_tensor_name(::std::string* save_tensor_name);

  // optional string restore_op_name = 3;
  void clear_restore_op_name();
  static const int kRestoreOpNameFieldNumber = 3;
  const ::std::string& restore_op_name() const;
  void set_restore_op_name(const ::std::string& value);
  void set_restore_op_name(const char* value);
  void set_restore_op_name(const char* value, size_t size);
  ::std::string* mutable_restore_op_name();
  ::std::string* release_restore_op_name();
  void set_allocated_restore_op_name(::std::string* restore_op_name);

  // optional int32 max_to_keep = 4;
  void clear_max_to_keep();
  static const int kMaxToKeepFieldNumber = 4;
  ::google::protobuf::int32 max_to_keep() const;
  void set_max_to_keep(::google::protobuf::int32 value);

  // optional bool sharded = 5;
  void clear_sharded();
  static const int kShardedFieldNumber = 5;
  bool sharded() const;
  void set_sharded(bool value);

  // optional float keep_checkpoint_every_n_hours = 6;
  void clear_keep_checkpoint_every_n_hours();
  static const int kKeepCheckpointEveryNHoursFieldNumber = 6;
  float keep_checkpoint_every_n_hours() const;
  void set_keep_checkpoint_every_n_hours(float value);

  // @@protoc_insertion_point(class_scope:tensorflow.SaverDef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr filename_tensor_name_;
  ::google::protobuf::internal::ArenaStringPtr save_tensor_name_;
  ::google::protobuf::internal::ArenaStringPtr restore_op_name_;
  ::google::protobuf::int32 max_to_keep_;
  bool sharded_;
  float keep_checkpoint_every_n_hours_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto();

  void InitAsDefaultInstance();
  static SaverDef* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SaverDef

// optional string filename_tensor_name = 1;
inline void SaverDef::clear_filename_tensor_name() {
  filename_tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaverDef::filename_tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.filename_tensor_name)
  return filename_tensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaverDef::set_filename_tensor_name(const ::std::string& value) {
  
  filename_tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.filename_tensor_name)
}
inline void SaverDef::set_filename_tensor_name(const char* value) {
  
  filename_tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.SaverDef.filename_tensor_name)
}
inline void SaverDef::set_filename_tensor_name(const char* value, size_t size) {
  
  filename_tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SaverDef.filename_tensor_name)
}
inline ::std::string* SaverDef::mutable_filename_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SaverDef.filename_tensor_name)
  return filename_tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaverDef::release_filename_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SaverDef.filename_tensor_name)
  
  return filename_tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaverDef::set_allocated_filename_tensor_name(::std::string* filename_tensor_name) {
  if (filename_tensor_name != NULL) {
    
  } else {
    
  }
  filename_tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename_tensor_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SaverDef.filename_tensor_name)
}

// optional string save_tensor_name = 2;
inline void SaverDef::clear_save_tensor_name() {
  save_tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaverDef::save_tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.save_tensor_name)
  return save_tensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaverDef::set_save_tensor_name(const ::std::string& value) {
  
  save_tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.save_tensor_name)
}
inline void SaverDef::set_save_tensor_name(const char* value) {
  
  save_tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.SaverDef.save_tensor_name)
}
inline void SaverDef::set_save_tensor_name(const char* value, size_t size) {
  
  save_tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SaverDef.save_tensor_name)
}
inline ::std::string* SaverDef::mutable_save_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SaverDef.save_tensor_name)
  return save_tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaverDef::release_save_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SaverDef.save_tensor_name)
  
  return save_tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaverDef::set_allocated_save_tensor_name(::std::string* save_tensor_name) {
  if (save_tensor_name != NULL) {
    
  } else {
    
  }
  save_tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_tensor_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SaverDef.save_tensor_name)
}

// optional string restore_op_name = 3;
inline void SaverDef::clear_restore_op_name() {
  restore_op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaverDef::restore_op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.restore_op_name)
  return restore_op_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaverDef::set_restore_op_name(const ::std::string& value) {
  
  restore_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.restore_op_name)
}
inline void SaverDef::set_restore_op_name(const char* value) {
  
  restore_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.SaverDef.restore_op_name)
}
inline void SaverDef::set_restore_op_name(const char* value, size_t size) {
  
  restore_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SaverDef.restore_op_name)
}
inline ::std::string* SaverDef::mutable_restore_op_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SaverDef.restore_op_name)
  return restore_op_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaverDef::release_restore_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SaverDef.restore_op_name)
  
  return restore_op_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaverDef::set_allocated_restore_op_name(::std::string* restore_op_name) {
  if (restore_op_name != NULL) {
    
  } else {
    
  }
  restore_op_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), restore_op_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SaverDef.restore_op_name)
}

// optional int32 max_to_keep = 4;
inline void SaverDef::clear_max_to_keep() {
  max_to_keep_ = 0;
}
inline ::google::protobuf::int32 SaverDef::max_to_keep() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.max_to_keep)
  return max_to_keep_;
}
inline void SaverDef::set_max_to_keep(::google::protobuf::int32 value) {
  
  max_to_keep_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.max_to_keep)
}

// optional bool sharded = 5;
inline void SaverDef::clear_sharded() {
  sharded_ = false;
}
inline bool SaverDef::sharded() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.sharded)
  return sharded_;
}
inline void SaverDef::set_sharded(bool value) {
  
  sharded_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.sharded)
}

// optional float keep_checkpoint_every_n_hours = 6;
inline void SaverDef::clear_keep_checkpoint_every_n_hours() {
  keep_checkpoint_every_n_hours_ = 0;
}
inline float SaverDef::keep_checkpoint_every_n_hours() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.keep_checkpoint_every_n_hours)
  return keep_checkpoint_every_n_hours_;
}
inline void SaverDef::set_keep_checkpoint_every_n_hours(float value) {
  
  keep_checkpoint_every_n_hours_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.keep_checkpoint_every_n_hours)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto__INCLUDED
